---
- name: Check Sealing Situation per Node
  block:
  - name: query seal endpoint 
    ansible.builtin.uri:
      url: "http://{{ inventory_hostname }}:8200/v1/sys/seal-status"
      status_code: 200
      return_content: true
    register: vault_seal_status
  - name: Set fact for Vault seal status
    set_fact:
      vault_sealed: "{{ vault_seal_status.json.sealed | default(true) }}"
  - name: Debug Vault seal status
    debug:
      msg: "Vault is sealed: {{ vault_sealed }} for {{ inventory_hostname }}"

- name: Grab Keys for Unsealing
  when: inventory_hostname == first_node
  block:
    - name: Read vault init file
      ansible.builtin.slurp:
        src: "{{ vault_init_file }}"
      register: vault_init_content

    - name: Parse JSON content
      ansible.builtin.set_fact:
        vault_data: "{{ vault_init_content.content | b64decode | from_json }}"

    - name: Set root token and unseal keys as variables
      ansible.builtin.set_fact:
        root_token: "{{ vault_data.root_token }}"
        unseal_keys_b64: "{{ vault_data.unseal_keys_b64 }}"

- name: Unseal First Node
  when: vault_sealed and inventory_hostname == first_node
  block:
    - name: Unseal node
      command: podman exec vault-node vault operator unseal {{ item }}
      loop:
        - "{{ hostvars[first_node].unseal_keys_b64[0] }}"
        - "{{ hostvars[first_node].unseal_keys_b64[1] }}"
        - "{{ hostvars[first_node].unseal_keys_b64[2] }}"
      environment:
        VAULT_ADDR: "http://{{ inventory_hostname }}:8200"

- name: Unseal+Join Further Nodes
  when: vault_sealed and inventory_hostname != first_node
  block:
    - name: Join node to the cluster
      command: podman exec vault-node vault operator raft join http://{{ first_node }}:8200
      environment:
        VAULT_ADDR: "http://{{ inventory_hostname }}:8200"

    - name: Unseal node
      command: podman exec vault-node vault operator unseal {{ item }}
      loop:
        - "{{ hostvars[first_node].unseal_keys_b64[0] }}"
        - "{{ hostvars[first_node].unseal_keys_b64[1] }}"
        - "{{ hostvars[first_node].unseal_keys_b64[2] }}"
      environment:
        VAULT_ADDR: "http://{{ inventory_hostname }}:8200"
    
- name: Cluster Readiness Check 
  block:
    - name: Check Vault status
      ansible.builtin.uri:
        url: "http://{{ inventory_hostname }}:8200/v1/sys/seal-status"
        status_code: 200
        return_content: true
      register: vault_seal_status

    - name: Debug Vault status
      debug:
        msg: |
          Node: {{ inventory_hostname }}
          Initialized: {{ vault_seal_status.json.initialized | default(false) }}
          Sealed: {{ vault_seal_status.json.sealed | default(true) }}
          Version: {{ vault_seal_status.json.version | default('unknown') }}
          Cluster Name: {{ vault_seal_status.json.cluster_name | default('unknown') }}

- name: Cluster Raft Check 
  when: inventory_hostname == first_node
  block:
    - name: Verify raft situation
      command: podman exec -e VAULT_TOKEN="{{ hostvars[first_node].root_token }}" -e VAULT_ADDR="http://{{ inventory_hostname }}:8200" vault-node vault operator raft list-peers
      register: raft_peers
      changed_when: false

    - name: Display raft status
      debug:
        msg: "{{ raft_peers.stdout_lines }}"
